openapi: 3.1.0
info:
  title: Bank rest
  description: Application for cards transactions and transfers
  version: v1
externalDocs:
  description: "README for application:"
  url: ""
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Authentication Controller
    description: Controller for authentication and token refreshing
  - name: User Transfer Controller
    description: Controller for user transfer management
  - name: User Card Controller
    description: Controller for user card management
  - name: Admin Card Controller
    description: Controller for admin card management
  - name: Admin User Controller
    description: Controller for admin user management
paths:
  /api/admin/cards/update/{cardId}:
    put:
      tags:
        - Admin Card Controller
      summary: Update card
      operationId: updateCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCardRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/me/transfers:
    post:
      tags:
        - User Transfer Controller
      summary: Execute transfer between current user cards
      description: Transfer must be between cards of the same user
      operationId: executeTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransferRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TransferResponse"
  /api/me/cards:
    get:
      tags:
        - User Card Controller
      summary: Get all current user cards
      operationId: showMyCards
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
    post:
      tags:
        - User Card Controller
      summary: Create card by user
      operationId: createMyCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/auth/sign-in:
    post:
      tags:
        - Authentication Controller
      summary: Sign in using JWT token
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentialsDto"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthDto"
  /api/auth/refresh:
    post:
      tags:
        - Authentication Controller
      summary: Refresh JWT token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthDto"
  /api/admin/users/create:
    post:
      tags:
        - Admin User Controller
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/admin/cards/create:
    post:
      tags:
        - Admin Card Controller
      summary: Create card
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/me/cards/block/{cardId}:
    patch:
      tags:
        - User Card Controller
      summary: Block current user card
      operationId: blockMyCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/admin/users/disable/{userId}:
    patch:
      tags:
        - Admin User Controller
      summary: Disable user
      operationId: disableUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/admin/users/activate/{userId}:
    patch:
      tags:
        - Admin User Controller
      summary: Activate user
      operationId: activateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/admin/cards/block/{cardId}:
    patch:
      tags:
        - Admin Card Controller
      summary: Block card
      operationId: blockCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/admin/cards/activate/{cardId}:
    patch:
      tags:
        - Admin Card Controller
      summary: Activate card
      operationId: activateCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/me/cards/{cardId}:
    get:
      tags:
        - User Card Controller
      summary: Get current user card by id
      operationId: getMyCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/me/cards/balance/{cardId}:
    get:
      tags:
        - User Card Controller
      summary: Get balance of current user card
      operationId: getMyBalance
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BalanceResponse"
  /api/admin/users/{username}:
    get:
      tags:
        - Admin User Controller
      summary: Find user by username
      operationId: findUserByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/admin/cards:
    get:
      tags:
        - Admin Card Controller
      summary: Get all card with parameters
      operationId: list
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
        - name: userId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
        - name: last4
          in: query
          required: false
          schema:
            type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
  /api/admin/cards/{cardId}:
    get:
      tags:
        - Admin Card Controller
      summary: Get card by id
      operationId: getCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/admin/users/delete/{userId}:
    delete:
      tags:
        - Admin User Controller
      summary: Delete user
      description: User must be disabled before deleting
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
  /api/admin/cards/delete/{cardId}:
    delete:
      tags:
        - Admin Card Controller
      summary: Delete card
      operationId: deleteCard
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: OK
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        uri:
          type: string
        code:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
    UpdateCardRequest:
      type: object
      properties:
        ownerName:
          type: string
          maxLength: 50
          minLength: 0
      required:
        - ownerName
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        ownerName:
          type: string
        panMasked:
          type: string
        panPlain:
          type: string
        expiryMonth:
          type: integer
          format: int32
        expiryYear:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balanceMinor:
          type: integer
          format: int64
        currency:
          type: string
        createdAt:
          type: string
          format: date-time
    CreateTransferRequest:
      type: object
      properties:
        fromCard:
          type: integer
          format: int64
        toCard:
          type: integer
          format: int64
        amountMinor:
          type: integer
          format: int64
        currency:
          type: string
          pattern: "^[A-Z]{3}$"
      required:
        - amountMinor
        - currency
        - fromCard
        - toCard
    TransferResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amountMinor:
          type: integer
          format: int64
        currency:
          type: string
        transferStatus:
          type: string
          enum:
            - FAILED
            - PENDING
            - SUCCESS
        createdAt:
          type: string
          format: date-time
    CreateCardRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        ownerName:
          type: string
          maxLength: 50
          minLength: 0
        currency:
          type: string
          pattern: "^[A-Z]{3}$"
      required:
        - currency
        - ownerName
    UserCredentialsDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    JwtAuthDto:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          type: string
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
      required:
        - password
        - role
        - username
    UserResponse:
      type: object
      properties:
        username:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - createdAt
        - enabled
        - role
        - username
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageCardResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    BalanceResponse:
      type: object
      properties:
        currentBalance:
          type: integer
          format: int64
        currency:
          type: string
